<?php



/**
 * Skeleton subclass for representing a row from the 'host' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.1-dev on:
 *
 * Mon May 23 21:11:36 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class Host extends BaseHost {

  protected $needDnsUpdate = null;
  protected $originalIpAddress = null;

  /**
   * Surcharge de la création de l'objet afin de sauvegarder la valeur originale
   * de l'adresse IP (utilisée dans la méthode preSave)
   *
   * @param  $row
   * @param int $startcol
   * @param bool $rehydrate
   * @return void
   */
  public function hydrate($row, $startcol = 0, $rehydrate = false)
  {
    $returnValue = parent::hydrate ($row, $startcol, $rehydrate);
    $this->originalIpAddress = $this->getIpAddress();
    return $returnValue;
  }

  public function __toString ()
  {
    return $this->getHostname ();
  }

  public function getHostname ()
  {
    return $this->getProfile().'-'.$this->getRoom ().'-'.$this->getNumber ();
  }

  public function getDomainName ()
  {
    return $this->getSubnet()->getDomainName();
  }

  public function getRevDomainName ()
  {
    return $this->getSubnet()->getRevDomainName();
  }

	/**
	 * Code to be run before persisting the object
   *
   * On détermine si le DNS devra être mis à jour après l'enregistrement en base
   *
	 * @param PropelPDO $con
	 */
	public function preSave(PropelPDO $con = null)
  {
    $this->needDnsUpdate = null;

    // Si l'IP est modifiée on supprime l'entrée du DNS.
    if (! $this->isNew () && $this->isColumnModified ('ip_address'))
      CommandPeer::runDnsDelete ($this->copy()->setIpAddress($this->originalIpAddress));
    // Le reste des modifications est pris en charge dans le postSave
    elseif ($this->needDnsUpdate())
      $this->needDnsUpdate = true; // Une fois dans postSave il est impossible de savoir ce
                                   // qui a été modifié, on enregistre donc l'info dans l'objet

    return parent::preSave ($con);
  }

	/**
	 * Code to be after before deleting the object in database
	 * @param PropelPDO $con
	 * @return boolean
	 */
	public function postDelete(PropelPDO $con = null)
	{
    CommandPeer::runDnsDelete ($this);
    CommandPeer::runDhcpdUpdate ();
		parent::postDelete ($con);
	}

	/**
	 * Code to be run after persisting the object
   *
   * On exécute alors la commande de mise à jour du DHCP
   *
	 * @param PropelPDO $con
	 */
	public function postSave(PropelPDO $con = null)
  {
    parent::postSave ($con);
    
    CommandPeer::runDhcpdUpdate ();

    // Mise à jour du DNS si nécessaire
    if ($this->needDnsUpdate === true)
      CommandPeer::runDnsUpdate ($this);
  }

  /**
   * Détermine si les modifications apportées à l'object nécessitent une mise à jour
   * de l'entrée dans le DNS
   *
   * @return boolean
   */
  public function needDnsUpdate ()
  {
    return ($this->isColumnModified ('profile_id') ||
            $this->isColumnModified ('room_id') ||
            $this->isColumnModified ('subnet_id') ||
            $this->isColumnModified ('ip_address'));
  }

} // Host
