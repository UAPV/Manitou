<?php



/**
 * Skeleton subclass for performing query and update operations on the 'command' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.1-dev on:
 *
 * Wed May 25 23:31:12 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class CommandPeer extends BaseCommandPeer {

  /**
   * Met à jour les fichiers de conf du DHCP et exécute la commande pour
   * mettre à jour le dépôt svn.
   *
   * @static
   * @return void
   */
  public static function runDhcpdUpdate ()
  {
    if (!sfContext::hasInstance())
      return;

    HostQuery::create()->find(); // Juste pour remplir le cache de propel
    $subnets  = SubnetQuery::create ()->find ();
    $confPath = sfConfig::get('sf_manitou_dhcpd_conf_path');

    sfContext::getInstance()->getConfiguration()->loadHelpers('Partial');
    sfConfig::set('sf_escaping_strategy', false);
    foreach ($subnets as $subnet)
    {
      $filename = $confPath.'/'.$subnet->getName().'.conf';
      file_put_contents ($filename, get_partial ('dhcpd/subnet.conf', array ('subnet' => $subnet)));
    }

    CommandPeer::getDhcpdUpdateCommand()->exec ();
  }

  public static function getDhcpdUpdateCommand ()
  {
    $command = new Command ();
    $command->setCommand (sfConfig::get('sf_manitou_dhcp_update_command'));
    $command->setArgument ('conf_path', sfConfig::get('sf_manitou_dhcpd_conf_path'));
    return $command;
  }

  public static function getCreateImageCommand (Image $image)
  {
    $command = new Command();
    $command->setCommand(sfConfig::get('sf_manitou_create_image_command'));

    $host = $image->getHost();
    $imageServer = $host->getSubnet()->getImageServer();

    $command->setArgument('host_ip',        $host->getIpAddress());
    $command->setArgument('host_mac',       $host->getMacAddress());
    $command->setArgument('interface',      $imageServer->getIface());
    $command->setArgument('image_server',   $imageServer->getHostname());
    $command->setArgument('image_filename', $image->getFilename());
    $command->setLabel ('Creation de l\'image "'.$image->getFilename().'" à partir de la machine '.$image->getHost());

    return $command;
  }

  public static function getRestoreImageCommand ()
  {
    $command = new Command();
    $command->setCommand(sfConfig::get('sf_manitou_restore_image_command'));
    return $command;
  }

  /**
   * Lance la mise à jour le DNS.
   * Commande à lancer lorsqu'une(des) machine(s) à été ajoutée ou modifiée.
   *
   *
   * @static
   * @param  $hosts     Tableau ou Object de la classe Host
   * @return Command
   */
  public static function runDnsUpdate ($hosts)
  {
    $addScript    = sfConfig::get('sf_manitou_ns_add_command');
    $deleteScript = sfConfig::get('sf_manitou_ns_delete_command');
    $script = '';

    $keys = array ('%domain%', '%reverse_domain%', '%hostname%', '%host_ip%');
    foreach ((array) $hosts as $host)
    {
      $replacedData = array (
          escapeshellarg ($host->getDomainName ()),
          escapeshellarg ($host->getRevDomainName ()),
          escapeshellarg ($host->getHostname ()),
          escapeshellarg ($host->getIpAddress ()),
      );

      // On supprime l'hôte par précaution au cas où il existe déjà
      $script .= str_replace ($keys, $replacedData, $deleteScript).'; ';
      $script .= str_replace ($keys, $replacedData, $addScript).'; ';
    }

    // faire exécuter toutes ces commandes par bash permet de récupérer la sortie en une seule fois
    $script = 'bash '.escapeshellarg ($script);

    $command = new Command ();
    $command->setCommand ($script);
    $command->setLabel ('Mise à jour des entrées du DNS');
    
    return $command->exec ();
  }

  /**
   * Lance la mise à jour le DNS.
   * Commande à lancer lorsqu'une(des) machine(s) à été ajoutée ou modifiée.
   *
   *
   * @static
   * @param  $hosts     Tableau ou Object de la classe Host
   * @return Command
   */
  public static function runDnsDelete ($hosts)
  {
    $deleteScript = sfConfig::get('sf_manitou_ns_delete_command');
    $script = '';

    $keys = array ('%domain%', '%reverse_domain%', '%host_ip%');
    foreach ((array) $hosts as $host)
    {
      $script .= str_replace ($keys, array (
          escapeshellarg ($host->getDomainName ()),
          escapeshellarg ($host->getRevDomainName ()),
          escapeshellarg ($host->getIpAddress ()),
      ), $deleteScript).'; ';
    }

    // faire exécuter toutes ces commandes par bash permet de récupérer la sortie en une seule fois
    $script = 'bash '.escapeshellarg ($script);

    $command = new Command ();
    $command->setCommand ($script);
    $command->setLabel ('Suppression d\'entrées du DNS');

    return $command->exec ();
  }

  public static function stopImageServer ()
  {
    $command = new Command ();
    $command->setCommand ($script);
    $command->setLabel ('Suppression d\'entrées du DNS');

    return $command->exec ();
  }


} // CommandPeer
